// Code generated by mockery v2.9.4. DO NOT EDIT.

package people

import (
	context "context"

	uuid "github.com/satori/go.uuid"
	mock "github.com/stretchr/testify/mock"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

// Find provides a mock function with given fields: ctx, firstName, lastName, phone
func (_m *MockRepository) Find(ctx context.Context, firstName string, lastName string, phone string) ([]PersonDTO, error) {
	ret := _m.Called(ctx, firstName, lastName, phone)

	var r0 []PersonDTO
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) []PersonDTO); ok {
		r0 = rf(ctx, firstName, lastName, phone)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]PersonDTO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, firstName, lastName, phone)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: ctx
func (_m *MockRepository) GetAll(ctx context.Context) ([]PersonDTO, error) {
	ret := _m.Called(ctx)

	var r0 []PersonDTO
	if rf, ok := ret.Get(0).(func(context.Context) []PersonDTO); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]PersonDTO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *MockRepository) GetByID(ctx context.Context, id uuid.UUID) (PersonDTO, error) {
	ret := _m.Called(ctx, id)

	var r0 PersonDTO
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) PersonDTO); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(PersonDTO)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
